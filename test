from writer import *
from reader import *
from dfa import *


class Scanner:
    def __init__(self):
        self.dfa = DFA(Common.N_OF_STATES.value)
        self.dfa.define_dfa()
        self.reader = Reader()
        self.writer = Writer()
        self.line_num = 1
        self.end_of_file = False
        self.has_decreseaed = False
        self.has_error = False
        self.comment_opened = False
        self.one_line_comment = False

        self.start = True

    def get_next_token(self, curr_state, next_ch, next_ch_type, all_tokens, all_errors, all_keys_ids):
        while True:
            

            pass


    def handle_all_tokens(self, all_tokens):
        tokens_dict = {}

        for token in all_tokens:
            if token[0] in tokens_dict.keys():
                tokens_dict[token[0]].append((token[1], token[2]))
            else:
                tokens_dict[token[0]] = [(token[1], token[2])]

        return tokens_dict

    def handle_all_errors(self, all_errors):
        errors_dict = {}

        for error in all_errors:
            if error[0] in errors_dict.keys():
                errors_dict[error[0]].append((error[1], error[2]))
            else:
                errors_dict[error[0]] = [(error[1], error[2])]

        return errors_dict

    def run_scanner(self):
        first_ch, first_ch_type = self.reader.get_next_char()
        self.reader.start_pointer = 0
        next_ch, next_ch_type = first_ch, first_ch_type

        all_tokens = []
        all_errors = []
        all_keys_ids = []

        while True:
            curr_state = self.dfa.start_state
            next_token, next_token_type, next_ch, next_ch_type, all_tokens, all_errors, all_keys_ids = self.get_next_token(curr_state, next_ch, next_ch_type, all_tokens, all_errors, all_keys_ids)
            self.reader.reset_pointers(self.has_decreseaed)
            # print("^^^^^^^^^", all_tokens)
            #print("&&&&&&&&&&&", all_errors)
            #print("##########", all_keys_ids)

            if self.end_of_file:
                break
            #if next_ch_type == CharType.EOF:
            #    break

        tokens_dict = self.handle_all_tokens(all_tokens)
        errors_dict = self.handle_all_errors(all_errors)
        all_keys_ids = list(set(all_keys_ids))

        self.writer.write_tokens(tokens_dict)
        self.writer.write_errors(errors_dict)
        self.writer.write_symbols(all_keys_ids)

        

